[project]
name = "discord-meeting-transcriptor"
version = "0.1.0"
description = "A Discord bot for meeting transcription, summaries, and interactive notes"
requires-python = ">=3.13"
readme = "README.md"
license = "MIT"

dependencies = [
    "discord.py>=2.6.4",
    "python-dotenv>=1.1.1",
    "asyncpg>=0.29.0",
    "audioop-lts>=0.2.2",
]

[project.optional-dependencies]
dev = [
    "mypy>=1.18.2",
    "ruff>=0.8.0",
    "black>=24.0.0",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pre-commit>=4.0.0",
    "watchfiles>=1.1.1",
]

# ============================================================================
# Ruff - Modern Python linter (replaces flake8, isort, and more)
# ============================================================================
[tool.ruff]
target-version = "py313"
line-length = 88
indent-width = 4

# Directories to exclude from linting
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable these rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort (import sorting)
    "N",      # pep8-naming
    "UP",     # pyupgrade (modernize syntax)
    "ANN",    # flake8-annotations
    "ASYNC",  # flake8-async
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "PTH",    # flake8-use-pathlib
    "PL",     # pylint
    "RUF",    # ruff-specific rules
]

# Disable specific rules that might be too strict
ignore = [
    "ANN101",  # Missing type annotation for self
    "ANN102",  # Missing type annotation for cls
    "ANN401",  # Dynamically typed expressions (Any) are disallowed
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
]

# Allow autofix for all enabled rules (when running with --fix)
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Ignore specific rules in specific files
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*.py" = [
    "ANN",  # Don't require annotations in tests
    "PLR2004",  # Allow magic values in tests
]

[tool.ruff.lint.isort]
known-first-party = ["source", "cogs"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.format]
# Use black-compatible formatting
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# ============================================================================
# Black - Code formatter
# ============================================================================
[tool.black]
line-length = 128
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.git
  | \.venv
  | __pycache__
  | build
  | dist
)/
'''

# ============================================================================
# MyPy - Static type checker
# ============================================================================
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
show_error_codes = true
strict = false
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
pretty = true

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# ============================================================================
# Pytest - Testing framework
# ============================================================================
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",                    # Show summary of all test results
    "--strict-markers",       # Raise error on unknown markers
    "--strict-config",        # Raise error on config issues
    "--showlocals",           # Show local variables in tracebacks
    "-vv",                    # Verbose output
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# ============================================================================
# Coverage - Code coverage measurement
# ============================================================================
[tool.coverage.run]
source = ["source", "cogs"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.venv/*",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# ============================================================================
# Bandit - Security linter
# ============================================================================
[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv"]
skips = ["B101", "B601"]  # B101: assert_used, B601: paramiko_calls

# ============================================================================
# Build System
# ============================================================================
[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["source", "cogs"]
